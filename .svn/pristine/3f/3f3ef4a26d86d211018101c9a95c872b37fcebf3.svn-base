package com.dwms.meeting.controller;

import java.util.List;
import java.util.Map;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.dwms.common.annotation.Log;
import com.dwms.common.controller.BaseController;
import com.dwms.common.domain.QueryRequest;
import com.dwms.common.domain.ResponseBo;
import com.dwms.common.util.FileUtils;
import com.dwms.meeting.domain.Meeting;
import com.dwms.meeting.service.MeetingService;

@Controller
public class MeetingController extends BaseController {

    private Logger log = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private MeetingService meetingService;

    @RequestMapping("meeting")
    @RequiresPermissions("meeting:list")
    public String index(Model model) {
    	model.addAttribute("isAdmin", isAdmin());
        return "meeting/meeting";
    }
    
    @RequestMapping("meeting/getMeeting")
    @ResponseBody
    public ResponseBo getMeeting(Integer mtgId) {
        try {
            Meeting meeting = this.meetingService.selectByKey(mtgId);
            return ResponseBo.ok(meeting);
        } catch (Exception e) {
            log.error("获取会议失败", e);
            return ResponseBo.error("获取会议失败，请联系网站管理员！");
        }
    }

    @Log("获取会议信息")
    @RequestMapping("meeting/list")
    @RequiresPermissions("meeting:list")
    @ResponseBody
    public Map<String, Object> meetingList(QueryRequest request, Meeting meeting) {
    	if (!isAdmin()) {
    		meeting.setPartyId(getPartyId());
    	}
        return super.selectByPageNumSize(request, () -> this.meetingService.findAllMeetings(meeting));
    }

    @RequestMapping("meeting/excel")
    @ResponseBody
    public ResponseBo meetingExcel(Meeting meeting) {
        try {
            List<Meeting> list = this.meetingService.findAllMeetings(meeting);
            return FileUtils.createExcelByPOIKit("会议表", list, Meeting.class);
        } catch (Exception e) {
            log.error("导出会议信息Excel失败", e);
            return ResponseBo.error("导出Excel失败，请联系网站管理员！");
        }
    }

    @RequestMapping("meeting/csv")
    @ResponseBody
    public ResponseBo meetingCsv(Meeting meeting) {
        try {
            List<Meeting> list = this.meetingService.findAllMeetings(meeting);
            return FileUtils.createCsv("会议表", list, Meeting.class);
        } catch (Exception e) {
            log.error("导出会议信息Csv失败", e);
            return ResponseBo.error("导出Csv失败，请联系网站管理员！");
        }
    }

    @Log("新增会议")
    @RequiresPermissions("meeting:add")
    @RequestMapping("meeting/add")
    @ResponseBody
    public ResponseBo addMeeting(Meeting meeting, String[] users) {
    	if (null == meeting.getPartyId()) {
    		meeting.setPartyId(getPartyId());
    	}
        try {
            this.meetingService.addMeeting(meeting, users);
            return ResponseBo.ok("新增会议成功！");
        } catch (Exception e) {
            log.error("新增会议失败", e);
            return ResponseBo.error("新增会议失败，请联系网站管理员！");
        }
    }

    @Log("修改会议")
    @RequiresPermissions("meeting:update")
    @RequestMapping("meeting/update")
    @ResponseBody
    public ResponseBo updateMeeting(Meeting meeting) {
        try {
            this.meetingService.updateMeeting(meeting);
            return ResponseBo.ok("修改会议成功！");
        } catch (Exception e) {
            log.error("修改会议失败", e);
            return ResponseBo.error("修改会议失败，请联系网站管理员！");
        }
    }
    
    @Log("删除会议")
    @RequiresPermissions("meeting:delete")
    @RequestMapping("meeting/delete")
    @ResponseBody
    public ResponseBo deleteDicts(String ids) {
        try {
        	return this.meetingService.deleteMeetings(ids);
        } catch (Exception e) {
            log.error("删除会议失败", e);
            return ResponseBo.error("删除会议失败，请联系网站管理员！");
        }
    }
}
